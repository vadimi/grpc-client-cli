syntax = "proto3";

package grpc_client_cli.testing;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "/;grpc_testing";

message User {
  int32 id = 1;
  string name = 2;
}


// A protobuf representation for grpc status. This is used by test
// clients to specify a status that the server should attempt to return.
message EchoStatus {
  int32 code = 1;
  string message = 2;
}

// Unary request.
message SimpleRequest {
  EchoStatus response_status = 1;

  User user = 2;
}

// Unary response, as configured by the request.
message SimpleResponse {
  User user = 1;
}

message SimpleAnyRequest {
  int32 user_id = 1;
  google.protobuf.Any user_props = 2;
}

message SimpleAnyResponse {
  int32 user_id = 1;
  google.protobuf.Any user_props = 2;
}

// Client-streaming request.
message StreamingInputCallRequest {
  User user = 1;
}

// Client-streaming response.
message StreamingInputCallResponse {
  // Aggregated size of payloads received from the client.
  int32 aggregated_payload_size = 1;
  User user = 2;
}

// Configuration for a particular response.
message ResponseParameters {
  // Desired payload sizes in responses from the server.
  // If response_type is COMPRESSABLE, this denotes the size before compression.
  int32 size = 1;

  // Desired interval between consecutive responses in the response stream in
  // microseconds.
  int32 interval_us = 2;
}

// Server-streaming request.
message StreamingOutputCallRequest {
  // Configuration for each expected response message.
  repeated ResponseParameters response_parameters = 1;

  // Optional input payload sent along with the request.
  User user = 2;

  // Whether server should return a given status
  EchoStatus response_status = 3;
}

// Server-streaming response, as configured by the request and parameters.
message StreamingOutputCallResponse {
  // Payload to increase response size.
  User user = 1;
}

// A simple service to test the various types of RPCs and experiment with
// performance with various types of payload.
service TestService {
  // One empty request followed by one empty response.
  rpc EmptyCall(google.protobuf.Empty) returns (google.protobuf.Empty);

  // One request followed by one response.
  // The server returns the client payload as-is.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  rpc StreamingOutputCall(StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by one response (streamed upload).
  // The server returns the aggregated size of client payload as the result.
  rpc StreamingInputCall(stream StreamingInputCallRequest)
      returns (StreamingInputCallResponse);

  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full duplexing.
  rpc FullDuplexCall(stream StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by a sequence of responses.
  // The server buffers all the client requests and then serves them in order. A
  // stream of responses are returned to the client when the server starts with
  // first request.
  rpc HalfDuplexCall(stream StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  rpc UnaryAny(SimpleAnyRequest) returns(SimpleAnyResponse);
}
